# ZSH Alias Configuration

platform=`uname` # for selecting aliases for a specific platform

# NodeJS
alias nnn='. ~/bin/use-pkg-node-version.sh'
alias nsn='. ~/bin/set-pkg-node-version.sh'
alias n26='nvm use 0.10.26'
alias n4='nvm use 4.2'
alias nls='npm run'
alias nw='npm run watch'
function nt() {
	TASKS_ARR=$(npm run | grep -v "^    " | sed -e 's/^[[:space:]]*//' | grep watch | grep test)
	npm run $(echo $TASKS_ARR | tail -n 1)
}
function on() {
	ports=("${(@f)$(netstat -anp 2> /dev/null | grep LISTEN.*node | awk '{ print $4 }' | cut -d':' -f4)}")
	for port in $ports; do
		o http://localhost:$port
	done
}
alias npm-exec='PATH=$(npm bin):$PATH'
alias ne='npm-exec'

# Quick Edit
function edit_config() {
	vim $(find -f ~/dotfiles/castle | peco)
}
alias git_merge_conflicts='git diff --name-only | uniq'
alias git_status_changes='git status -s | cut -d\  -f3'
function git_latest_changes() {
	git log --no-merges --name-status -${1:-10} . | grep ^[MAR][[:space:]] | cut -f2 | uniq
}
alias fix='vim $(git_merge_conflicts)' #fix (merge conflicts)
alias changes='vim $(git_status_changes)' #git status edit
function latest() {
	local interactive=""
	while getopts ":i" opt; do
		case "$opt" in
			i)
				interactive="ON"
				;;
		esac
	done
	shift "$((OPTIND - 1))"
	if [[ "$interactive" == "ON" ]]; then
		vim $(git_latest_changes $* | peco)
	else
		vim $(git_latest_changes $*)
	fi
}
# Git smart checkout. Remembers last branch and lets you quickly switch between
function gch() {
	local currentBranch=$(git rev-parse --abbrev-ref HEAD)
	local previousFile="$(git rev-parse --show-toplevel)/.git/PREVIOUS_HEAD"
	if [ -n "$1" ]; then
		echo "$currentBranch" >> $previousFile
		git checkout "$@"
	else
		if [ ! -f "$previousFile" ]; then echo >&2 "ERROR: Missing PREVIOUS_HEAD. Please run gch with 1 argument first."
		else
			git checkout "$(cat $previousFile | tail --lines=1)"
			echo "$currentBranch" >> $previousFile
		fi
	fi
	# truncate the file
	tail -n10 $previousFile > "$previousFile.TEMP"
	mv -f "$previousFile"{.TEMP,}
}

# Docker
alias dicker='docker'
alias dc='docker-compose'

# Github Clone
function h() {
	g clone https://github.com/$1.git
}

# AWS
function s3ls() {
	aws s3 ls s3://$1
}

# Find file
function ff() {
	find $(pwd) -name "*$1*" | \
		grep -v -E /\(node_modules\|bower_components\|.git\)
}

# Find in file
function f()
{
	grep --color=always \
		-Rnw -i "$1" \
		--include=**\*.{js,json,sh,yml} \
		--exclude-dir={node_modules,bower_components} \
		$(pwd) | \
		sed -e "s/\t//g" | \
		sed "s/:/:\t /2" | \
		column -ts $'\t'
}
function fl()
{
	f $1 | \
		less -S
}

# Mongo
alias mup='sudo service mongod start'
alias mdown='sudo service mongod stop'

# Reading logfiles
alias lf='goaccess -p ~/.goaccessrc -f'
alias lapp='lf log/app-*.log'

# Misc Pipeable
if [[ $platform == 'Linux' ]]; then
	alias copy='xsel -ib'
	alias pbpaste='xsel --clipboard --output'
elif [[ $platform == 'Darwin' ]]; then
	alias copy='pbcopy'
fi

# Fun Stuff
alias fuck='sudo $(fc -ln -1)' # also achievable with `sudo !!`
alias nyan='~/Projects/stuff/nyancat/src/nyancat'
alias lsd='nyan'
alias fisk='~/Projects/stuff/nyan-dopefish/src/nyancat'

# Misc Shortcuts
alias mux='tmuxifier'
alias td='cd $(mktemp -d)'
alias week='/bin/date +%V'
alias pp='python /opt/spotify-notify/spotify-notify.py -a playPause'
alias ipip='what-is-my-ip.sh'
if [[ $platform == 'Linux' ]]; then
	alias o='google-chrome --new-window' # Mac OSX I do this with `open` instead
elif [[ $platform == 'Darwin' ]]; then
	alias ls='ls -GFph'
	alias grep='grep --color=auto'
	export CLICOLOR=1
	alias o='open'
fi
alias diskspace_report="df -P -kHl"
alias free_diskspace_report="diskspace_report"

# iCal stuff on Mac OSX
if [[ $platform == 'Darwin' ]]; then
	alias today_verbose='icalBuddy -n -f eventsToday'
	alias today='icalBuddy -f -npn -nc -ps "/ Â» /" -iep "title,location,datetime,notes" -po "datetime,title,location,notes" -eed eventsToday'
fi

# List available tasks
function lt() {
	if [ -e package.json ]; then npm run; fi
	if [ -e Gulpfile.js ]; then gulp --tasks; fi
	if [ -e Gruntfile.js ]; then grunt --help --no-color; fi
}

# Open Web (using o alias)
function ow() {
	o http://localhost:$1
}

# Open Remote Repo (using o alias)
function or() {
	remotes=($(git remote -v | grep origin | cut -d$'\t' -f2 | cut -d' ' -f1 | sed 's/git@//g' | sed 's/:/\//'))
	o http://${remotes[1]}
}

# project aliases and scripts
function work_create() {
	printf "Create workspace scripts? (yN) "
	read -rs -k 1 ans
	printf "${ans}\n"
	case "${ans}" in
		y|Y)
			f=$(pwd -P)/.workspace.zsh
			echo "alias dump='git fetch --all'" > $(pwd -P)/.workspace.zsh
			printf "Created file at $f\n"
			vim $f
			return 0
			;;
		*)  # This is the default
			return 1
	esac
}
function work() {
	workspace=$(pwd -P)
	for f in $workspace/.workspace.*sh; do
		if [ -e "$f" ]; then
			printf "Sourcing $f\n"
			source $f
		else
			printf "No workspace scripts available. "
			work_create
		fi
	done
}

# Quick open useful web pages/apps
alias odd='o http://devdocs.io'

function src() {
	echo "Resourcing..."
	source $HOME/.zshrc
	echo "Rehashing completion..."
	zstyle ":completion:*:commands" rehash 1
}

# Update Stuff
if [[ $platform == 'Linux' ]]; then
elif [[ $platform == 'Darwin' ]]; then
	alias update_brew='brew -v update; brew upgrade --cleanup; brew cleanup; brew cask cleanup; brew prune; brew doctor'
	alias cask='brew cask'
	alias note='open -a Notes'
fi
alias update_dotfiles='pushd $HOME/dotfiles; ./update.sh; popd'
