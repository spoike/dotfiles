# ZSH Alias Configuration

platform=`uname` # for selecting aliases for a specific platform

# Quick Aliases
alias c='clear'
alias q='quit'

# NodeJS
alias nu='nvm use'
alias nnn='. ~/bin/use-pkg-node-version.sh'
alias nsn='. ~/bin/set-pkg-node-version.sh'
alias n26='nvm use 0.10.26'
alias n4='nvm use 4.2'
alias nls='npm run'
alias nw='npm run watch'
function nt() {
	TASKS_ARR=$(npm run | grep -v "^    " | sed -e 's/^[[:space:]]*//' | grep watch | grep test)
	npm run $(echo $TASKS_ARR | tail -n 1)
}
function on() {
	ports=("${(@f)$(netstat -anp 2> /dev/null | grep LISTEN.*node | awk '{ print $4 }' | cut -d':' -f4)}")
	for port in $ports; do
		o http://localhost:$port
	done
}
alias npm-exec='PATH=$(npm bin):$PATH'
alias ne='npm-exec'

# Quick Edit
function edit_config() {
	vim $(find -f ~/dotfiles/castle | peco)
}
alias git_merge_conflicts='git diff --name-only | uniq'
alias git_status_changes='git status -s | cut -d\  -f3'
function git_latest_changes() {
	git log --no-merges --name-status -${1:-10} . | grep ^[MAR][[:space:]] | cut -f2 | uniq
}
alias fix='vim $(git_merge_conflicts)' #fix (merge conflicts)
alias changes='vim $(git_status_changes)' #git status edit
function latest() {
	local interactive=""
	while getopts ":i" opt; do
		case "$opt" in
			i)
				interactive="ON"
				;;
		esac
	done
	shift "$((OPTIND - 1))"
	if [[ "$interactive" == "ON" ]]; then
		vim $(git_latest_changes $* | peco)
	else
		vim $(git_latest_changes $*)
	fi
}

# Docker
alias dicker='docker'
alias dc='docker-compose'

# Github Clone
function h() {
	g clone https://github.com/$1.git
}

# AWS
function s3ls() {
	aws s3 ls s3://$1
}

# Mongo
alias mup='sudo service mongod start'
alias mdown='sudo service mongod stop'

# Reading logfiles
alias lf='goaccess -p ~/.goaccessrc -f'
alias lapp='lf log/app-*.log'

# Misc Pipeable
if [[ $platform == 'Linux' ]]; then
	alias copy='xsel -ib'
	alias pbpaste='xsel --clipboard --output'
elif [[ $platform == 'Darwin' ]]; then
	alias copy='pbcopy'
fi

# Fun Stuff
alias nyan='~/Projects/stuff/nyancat/src/nyancat'
alias lsd='nyan'
alias fisk='~/Projects/stuff/nyan-dopefish/src/nyancat'
if [ -x "$(command -v thefuck)" ]; then
	eval $(thefuck --alias)
else
	alias fuck='sudo $(fc -ln -1)' # also achievable with `sudo !!`
fi
alias fu='fuck'
alias dafuq='fuck'

# tmux Stuff
alias mux='tmuxifier'
alias t='tmux a || tmux new'

# Misc Shortcuts
alias td='cd $(mktemp -d)'
alias week='/bin/date +%V'
alias pp='python /opt/spotify-notify/spotify-notify.py -a playPause'
alias ipip='what-is-my-ip.sh'
if [[ $platform == 'Linux' ]]; then
	alias o='google-chrome --new-window' # Mac OSX I do this with `open` instead
elif [[ $platform == 'Darwin' ]]; then
	alias ls='ls -GFph'
	alias grep='grep --color=auto'
	export CLICOLOR=1
	alias o='open'
fi
alias diskspace_report="df -P -kHl"
alias free_diskspace_report="diskspace_report"

# iCal stuff on Mac OSX
if [[ $platform == 'Darwin' ]]; then
	alias today_verbose='icalBuddy -n -f eventsToday'
	alias today='icalBuddy -f -npn -nc -ps "/ » /" -iep "title,location,datetime,notes" -po "datetime,title,location,notes" -eed eventsToday'
fi

# List available tasks
function list_tasks() {
	if [ -e package.json ]; then npm run; fi
	if [ -e Gulpfile.js ]; then gulp --tasks; fi
	if [ -e Gruntfile.js ]; then grunt --help --no-color; fi
}

# Open Web (using o alias)
function ow() {
	o http://localhost:$1
}

function get_remote_repo_url() {
  git remote -v | grep origin | cut -d$'\t' -f2 | cut -d' ' -f1 | \
    sed 's/git@/https:\/\//g' | sed -E 's/(https?:\/\/.*):/\1\//g' | \
    grep -Ev "^\s*$" | \
    sort | uniq
}

# Open Remote Repo (using o alias)
function or() {
  o ${$(get_remote_repo_url)[1]}
}

function orp() {
  o ${$(get_remote_repo_url)[1]}/pulls
}

function get_project_url() {
  local urls
  urls=$(cat .url && echo $(get_remote_repo_url))
  print $urls | fzf
}

function url() {
  local selection
  selection=$(get_project_url)
  if [ -n "$selection" ]; then
    print "Opening $selection..."
    o $selection
  fi
}

# change directory to git top level
function gcd() {
  topdir=$(git rev-parse --show-toplevel)
  if [[ $? -ne 0 ]]; then
    return 1
  fi
  cd "${topdir}/${1}"
}

# project aliases and scripts
function work_create() {
	f=$1/.workspace.zsh
	printf "Create workspace scripts at \"$f\"? (yN) "
	read -rs -k 1 ans
	printf "${ans}\n"
	case "${ans}" in
		y|Y)
			echo "alias dump='git fetch --all'" > $f
			printf "Created file at $f\n"
			vim $f
			return 0
			;;
		*)  # This is the default
			return 1
	esac
}
function work() {
	workspace=$(git rev-parse --show-toplevel 2> /dev/null || pwd -P)
	for f in $workspace/.workspace.*sh; do
		if [ -e "$f" ]; then
			printf "Sourcing $f\n"
			source $f
		else
			printf "No workspace scripts available.\n"
			work_create $workspace
		fi
	done
}

# fzf stuff
# more examples here: https://github.com/junegunn/fzf/wiki/examples
if command -v fzf &> /dev/null; then
  # Avoid collision with fzf/z binding in .zshrc_aliases that installed z adds (with brew)
  export _Z_CMD='za'

	# bind f to find a file to open
	alias f='vim $(fzf)'

  # List all private SSH keys (that have a .pub associated) and let user select for ssh-add
  alias ssha='print -rl -- ~/.ssh/*.pub | sed -e "s/.pub$//" | fzf | xargs ssh-add'

  # z with fzf
  #unalias z
  z() {
    if [[ -z "$*" ]]; then
      cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
    else
      _last_z_args="$@"
      _z "$@"
    fi
  }

  zz() {
    cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
  }

	v() {
		local files
		files=$(grep '^>' ~/.viminfo | cut -c3- |
		while read line; do
			[ -f "${line/\~/$HOME}" ] && echo "$line"
		done | fzf-tmux -d -m -q "$*" -1) && vim ${files//\~/$HOME}
	}

	# fuzzy grep open via ag
	vg() {
		local file

		file="$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1 " +" $2}')"

		if [[ -n $file  ]]
		then
			vim $file
		fi
	}

  # From https://github.com/junegunn/fzf/wiki/Examples
  # fbr - checkout git branch (including remote branches), sorted by most recent commit, limit 30 last branches
  fbr() {
    local branches branch
    branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)") &&
    branch=$(echo "$branches" |
             fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
  }

  # https://gist.github.com/junegunn/a563d9e3e07fd721d618562762ec619d
  gstash() {
    local out k reflog
    out=(
      $(git stash list --pretty='%C(yellow)%gd %>(14)%Cgreen%cr %C(blue)%gs' |
        fzf --ansi --no-sort --header='enter:show, ctrl-d:diff, ctrl-o:pop, ctrl-y:apply, ctrl-x:drop' \
            --preview='git stash show --color=always -p $(cut -d" " -f1 <<< {}) | head -'$LINES \
            --preview-window=down:50% --reverse \
            --bind='enter:execute(git stash show --color=always -p $(cut -d" " -f1 <<< {}) | less -r > /dev/tty)' \
            --bind='ctrl-d:execute(git diff --color=always $(cut -d" " -f1 <<< {}) | less -r > /dev/tty)' \
            --expect=ctrl-o,ctrl-y,ctrl-x))
    k=${out[0]}
    reflog=${out[1]}
    [ -n "$reflog" ] && case "$k" in
      ctrl-o) git stash pop $reflog ;;
      ctrl-y) git stash apply $reflog ;;
      ctrl-x) git stash drop $reflog ;;
    esac
  }
fi
command -v ag >/dev/null 2>&1 && alias ff='ag'

# Quick open useful web pages/apps
alias odd='o http://devdocs.io'

function src() {
	echo "Resourcing..."
	source $HOME/.zshrc
	echo "Rehashing completion..."
	zstyle ":completion:*:commands" rehash 1
}

# Update Stuff
if [[ $platform == 'Linux' ]]; then
elif [[ $platform == 'Darwin' ]]; then
	alias update_brew='brew -v update; brew upgrade --cleanup; brew cleanup; brew cask cleanup; brew prune; brew doctor'
	alias brewu='update_brew'
	alias cask='brew cask'
	alias note='open -a Notes'
fi
alias update_dotfiles='pushd $HOME/dotfiles; ./update.sh; popd'

# Include z command
if [ -e "/usr/local/etc/profile.d/z.sh" ]; then
	source /usr/local/etc/profile.d/z.sh
fi

alias atompipe='tmpin | atom'

function up {
	if [[ "$#" < 1 ]] ; then
		cd ..
	else
		CDSTR=""
		for i in {1..$1} ; do
			CDSTR="../$CDSTR"
		done
		cd $CDSTR
	fi
}

function weather {
  curl wttr.in/${1:-kävlinge}
}

alias get_external_ip="curl ipinfo.io"

alias dark="base16_solarflare"
alias light="base16_atelier-dune-light"
alias colortest="~/.config/base16-shell/./colortest"
